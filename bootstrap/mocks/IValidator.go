// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	bootstrap "github.com/SawitProRecruitment/UserService/bootstrap"
	mock "github.com/stretchr/testify/mock"

	validator "github.com/go-playground/validator/v10"
)

// IValidator is an autogenerated mock type for the IValidator type
type IValidator struct {
	mock.Mock
}

// RegisterValidation provides a mock function with given fields: tag, fn, callValidationEvenIfNull
func (_m *IValidator) RegisterValidation(tag string, fn validator.Func, callValidationEvenIfNull ...bool) error {
	_va := make([]interface{}, len(callValidationEvenIfNull))
	for _i := range callValidationEvenIfNull {
		_va[_i] = callValidationEvenIfNull[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tag, fn)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, validator.Func, ...bool) error); ok {
		r0 = rf(tag, fn, callValidationEvenIfNull...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Struct provides a mock function with given fields: s
func (_m *IValidator) Struct(s interface{}) []bootstrap.ValidationError {
	ret := _m.Called(s)

	var r0 []bootstrap.ValidationError
	if rf, ok := ret.Get(0).(func(interface{}) []bootstrap.ValidationError); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bootstrap.ValidationError)
		}
	}

	return r0
}

// NewIValidator creates a new instance of IValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *IValidator {
	mock := &IValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
