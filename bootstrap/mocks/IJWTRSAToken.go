// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IJWTRSAToken is an autogenerated mock type for the IJWTRSAToken type
type IJWTRSAToken struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: userID, expiredTime
func (_m *IJWTRSAToken) GenerateToken(userID int, expiredTime int) (string, error) {
	ret := _m.Called(userID, expiredTime)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (string, error)); ok {
		return rf(userID, expiredTime)
	}
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(userID, expiredTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, expiredTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParserToken provides a mock function with given fields: tokenString
func (_m *IJWTRSAToken) ParserToken(tokenString string) (int, error) {
	ret := _m.Called(tokenString)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIJWTRSAToken creates a new instance of IJWTRSAToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIJWTRSAToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *IJWTRSAToken {
	mock := &IJWTRSAToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
