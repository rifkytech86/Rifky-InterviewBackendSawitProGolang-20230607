// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/SawitProRecruitment/UserService/models"
	mock "github.com/stretchr/testify/mock"
)

// IUserServicePointRepository is an autogenerated mock type for the IUserServicePointRepository type
type IUserServicePointRepository struct {
	mock.Mock
}

// GetUserByPhone provides a mock function with given fields: ctx, phoneNumber
func (_m *IUserServicePointRepository) GetUserByPhone(ctx context.Context, phoneNumber string) (*models.User, error) {
	ret := _m.Called(ctx, phoneNumber)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserID provides a mock function with given fields: ctx, userID
func (_m *IUserServicePointRepository) GetUserByUserID(ctx context.Context, userID int) (*models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsetUser provides a mock function with given fields: ctx, data
func (_m *IUserServicePointRepository) InsetUser(ctx context.Context, data models.User) (int64, error) {
	ret := _m.Called(ctx, data)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (int64, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) int64); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, userID, fields
func (_m *IUserServicePointRepository) UpdateUser(ctx context.Context, userID int, fields map[string]interface{}) error {
	ret := _m.Called(ctx, userID, fields)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, map[string]interface{}) error); ok {
		r0 = rf(ctx, userID, fields)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserServicePointRepository creates a new instance of IUserServicePointRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserServicePointRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserServicePointRepository {
	mock := &IUserServicePointRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
